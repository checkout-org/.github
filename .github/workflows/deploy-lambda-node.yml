name: Deploy to Lambda

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      node-version:
        required: true
        type: string
      lambda-url:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      FUNCTION_NAME:
        required: true
      S3_BUCKET:
        required: true

jobs:

  prepare:
    name: Prepare For Deployment
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get-sha.outputs.SHA }}
    steps:

      - name: Get SHA
        id: get-sha
        run: echo "SHA=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to Lambda
    needs: [ prepare ]
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.lambda-url }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Node dependencies
        run: |
          npm pkg delete scripts.prepare && npm ci --only=prod --omit=dev

      - name: Zip Package
        run: zip -rq lambda.zip node_modules index.js index.mjs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp lambda.zip s3://${{ secrets.S3_BUCKET }}/${{ secrets.FUNCTION_NAME }}/${{ needs.prepare.outputs.sha }}.zip

      - name: Deploy to Lambda from S3
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.FUNCTION_NAME }} \
            --s3-bucket ${{ secrets.S3_BUCKET }} \
            --s3-key ${{ secrets.FUNCTION_NAME }}/${{ needs.prepare.outputs.sha }}.zip

      - name: Wait for Lambda update to complete
        run: |
          aws lambda wait function-updated \
            --function-name ${{ secrets.FUNCTION_NAME }}

      - name: Update or Create Lambda Alias
        if: ${{ vars.VERSION_ALIAS }}
        run: |
          version=$(aws lambda publish-version --function-name ${{ secrets.FUNCTION_NAME }} --query 'Version' --output text)
          alias_exists=$(aws lambda get-alias --function-name ${{ secrets.FUNCTION_NAME }} --name ${{ vars.VERSION_ALIAS }} 2>&1 || true)
          if echo "$alias_exists" | grep -q 'ResourceNotFoundException'; then
            aws lambda create-alias \
              --function-name ${{ secrets.FUNCTION_NAME }} \
              --name ${{ vars.VERSION_ALIAS }} \
              --function-version $version
          else
            aws lambda update-alias \
              --function-name ${{ secrets.FUNCTION_NAME }} \
              --name ${{ vars.VERSION_ALIAS }} \
              --function-version $version
          fi
